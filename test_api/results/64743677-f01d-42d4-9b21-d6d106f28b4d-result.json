{"name": "test_partial_update_booking", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument '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headers'", "trace": "create_booking = {'additionalneeds': 'Biciga', 'bookingdates': {'checkin': '2018-01-01', 'checkout': '2019-01-01'}, 'depositpaid': True, 'firstname': 'Biciga', ...}\nuser_data = {'email': 'string@sad.com', 'firstName': 'Nilope', 'id': 18, 'lastName': 'Nilope', ...}\n\n    def test_partial_update_booking(create_booking, user_data):\n        '''Updates a current booking with a partial payload'''\n        ids = []\n        auth = requests.post(url=api_urls.AUTH, headers=HEADERS, data=dumps(user_data))\n        cookie_value = f\"token={json.loads(auth.text)['token']}\"\n        cookie = {\"cookie\": cookie_value}\n        creare_booking_post = requests.post(url=api_urls.BOOKING, headers=HEADERS,  data=dumps(create_booking))\n        dic = creare_booking_post.json()\n        for key, value in dic.items(): ids.append(value)\n        link = f\"https://restful-booker.herokuapp.com/booking/{ids[0]}\"\n>       partial_update_booking = requests.patch(url=link, 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headers=cookie, data=dumps(create_booking))\n\ntests_api.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3/dist-packages/requests/api.py:146: in patch\n    return request('patch', url, data=data, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'patch', url = 'https://restful-booker.herokuapp.com/booking/13'\nkwargs = {'data': '{\"firstname\": \"Biciga\", \"lastname\": \"Biciga\", \"totalprice\": 111, \"depositpaid\": true, \"bookingdates\": {\"chec... \"additionalneeds\": \"Biciga\"}', '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headers': {'cookie': 'token=311402fc6181a90'}}\nsession = <requests.sessions.Session object at 0x7f35ad7c7340>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument '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headers'\n\n/usr/lib/python3/dist-packages/requests/api.py:60: TypeError"}, "description": "Updates a current booking with a partial payload", "start": 1627540455639, "stop": 1627540456821, "uuid": "4dc89f1e-7755-4d0c-a9a9-bad63feef4ab", "historyId": "d5c67a3fd7f770c3f9c865a9fa02c9bd", "testCaseId": "72cc433bd959f8dfeb4b47b970b5b14a", "fullName": "tests_api#test_partial_update_booking", "labels": [{"name": "suite", "value": "tests_api"}, {"name": "host", "value": "andrew-HP"}, {"name": "thread", "value": "17734-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_api"}]}